#!/usr/bin/env python3
"""
Day 12 ‚Äì Basic URL Malware Checker
----------------------------------
Checks URLs from a file against simple suspicious patterns:
‚Ä¢ IP-based URLs
‚Ä¢ URLs with suspicious keywords
‚Ä¢ URLs with very long query strings

‚ö†Ô∏è This is a simple heuristic demo ‚Äì not a real AV scanner!
"""

import re
import sys
import os

# Regex for IP address based URLs (http://1.2.3.4/path)
IP_URL_PATTERN = re.compile(r"https?://\d{1,3}(?:\.\d{1,3}){3}")
# Common phishing/malware keywords
SUSPICIOUS_KEYWORDS = [
    "login", "verify", "update", "secure", "bank", "paypal", "free", "click"
]

def check_url(url: str) -> list[str]:
    """Return list of warnings for a single URL."""
    warnings = []
    if IP_URL_PATTERN.search(url):
        warnings.append("üî¥ Uses raw IP address")
    if any(k in url.lower() for k in SUSPICIOUS_KEYWORDS):
        warnings.append("üü† Contains suspicious keyword")
    # Check for very long query string
    if "?" in url and len(url.split("?", 1)[1]) > 80:
        warnings.append("üü† Very long query string")
    return warnings

def scan_file(file_path: str):
    if not os.path.isfile(file_path):
        print("‚ùå File not found.")
        return
    with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            url = line.strip()
            if not url:
                continue
            issues = check_url(url)
            if issues:
                print(f"‚ö†Ô∏è  {url}")
                for w in issues:
                    print(f"   - {w}")
            else:
                print(f"‚úÖ {url} seems clean")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python Day12_url_malware_checker.py <urls_file>")
        sys.exit(1)

    print("\nüîç Scanning URLs...\n")
    scan_file(sys.argv[1])
